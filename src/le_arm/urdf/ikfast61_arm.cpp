/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-07-12 10:59:31.382195
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKsin(j[0]);
x7=IKcos(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.169)*x3);
x11=((1.0)*x5);
x12=((1.0)*x2);
x13=((1.0)*x6);
x14=((1.0)*x7);
x15=((0.098)*x2);
x16=((0.098)*x6);
x17=((0.169)*x6);
x18=((1.0)*x0);
x19=((0.001)*x3);
x20=((0.169)*x2);
x21=((1.0)*x3);
x22=((0.001)*x2);
x23=(x0*x4);
x24=(x2*x4);
x25=(x1*x3);
x26=(x4*x6);
x27=(x1*x6);
x28=(x0*x1);
x29=(x3*x4);
IkReal x30=((1.0)*x23);
eetrans[0]=((0.001)+((x22*x28))+(((-0.104)*x23))+(((-0.098)*x0*x25))+((x5*(((((-1.0)*x10*x30))+((x20*x28))))))+(((-1.0)*x19*x30))+(((-1.0)*x15*x30))+((x7*(((((-1.0)*x20*x30))+(((-1.0)*x10*x28))))))+(((0.011)*x0)));
IkReal x31=((1.0)*x26);
eetrans[1]=(((x7*(((((-1.0)*x17*x24))+(((-1.0)*x10*x27))))))+((x22*x27))+(((-0.104)*x26))+(((-1.0)*x16*x25))+(((-1.0)*x19*x31))+(((-1.0)*x15*x31))+((x5*(((((-1.0)*x10*x31))+((x1*x17*x2))))))+(((0.011)*x6)));
eetrans[2]=((0.085)+((x22*x4))+((x1*x15))+((x1*x19))+((x5*((((x1*x10))+((x20*x4))))))+(((0.104)*x1))+(((-0.098)*x29))+((x7*((((x1*x20))+(((-1.0)*x10*x4)))))));
eerot[0]=((((-1.0)*x8*((((x14*(((((-1.0)*x18*x29))+((x12*x28))))))+((x11*((((x18*x25))+((x12*x23))))))))))+((x6*x9)));
eerot[1]=((((-1.0)*x18*x9))+(((-1.0)*x8*((((x14*(((((-1.0)*x13*x29))+((x12*x27))))))+((x11*((((x12*x26))+((x13*x25)))))))))));
eerot[2]=((-1.0)*x8*((((x11*((((x21*x4))+(((-1.0)*x1*x12))))))+((x14*((((x1*x21))+((x12*x4)))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((-0.001)+px);
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.085)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x33 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x33.valid){
continue;
}
IkReal x32=x33.value;
j0array[0]=((-1.0)*x32);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x32)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x34=pz*pz;
IkReal x35=px*px;
IkReal x36=py*py;
IkReal x37=((0.004444)*r02);
IkReal x38=((0.029673)*r02);
IkReal x39=((0.000416)*r02);
IkReal x40=((0.029629)*r02);
IkReal x41=((0.000132)*r02);
IkReal x42=(cj0*r00);
IkReal x43=((2.0)*r02);
IkReal x44=((0.024)*pz);
IkReal x45=(r01*sj0);
IkReal x46=(py*r01);
IkReal x47=((4.0)*pz);
IkReal x48=((0.404)*pz);
IkReal x49=((0.044)*pz);
IkReal x50=(py*sj0);
IkReal x51=(cj0*px);
IkReal x52=(px*r00);
IkReal x53=(pz*r02);
IkReal x54=((0.02)*pz);
IkReal x55=((2.0)*pz);
IkReal x56=((0.012)*pz);
IkReal x57=((0.022)*x53);
IkReal x58=((0.022)*x46);
IkReal x59=((0.012123)*x42);
IkReal x60=((0.022)*x52);
IkReal x61=((0.012123)*x45);
IkReal x62=((0.208)*x52);
IkReal x63=((0.208)*x53);
IkReal x64=((0.208)*x46);
IkReal x65=(r02*x36);
IkReal x66=(r02*x35);
IkReal x67=((0.00208)*x42);
IkReal x68=((0.00208)*x45);
IkReal x69=((0.059786)*x45);
IkReal x70=((0.059786)*x42);
IkReal x71=(r02*x49);
IkReal x72=((0.044)*x46);
IkReal x73=((0.044)*x52);
IkReal x74=(r02*x34);
IkReal x75=((0.002496)*x45);
IkReal x76=((0.002496)*x42);
IkReal x77=((0.028645)*x45);
IkReal x78=((0.028645)*x42);
IkReal x79=((2.0)*x34);
IkReal x80=((1.0)*x34);
IkReal x81=((1.0)*x35);
IkReal x82=(r02*x50);
IkReal x83=((1.0)*x36);
IkReal x84=((2.0)*x35);
IkReal x85=((2.0)*x36);
IkReal x86=((0.404)*x82);
IkReal x87=((0.404)*r02*x51);
IkReal x88=(x42*x48);
IkReal x89=(x45*x48);
IkReal x90=(x52*x55);
IkReal x91=(x46*x55);
IkReal x92=(x45*x54);
IkReal x93=(x42*x54);
IkReal x94=((0.02)*r02*x51);
IkReal x95=((1.0)*x74);
IkReal x96=((0.02)*x82);
IkReal x97=((0.024)*r02*x51);
IkReal x98=((0.024)*x82);
IkReal x99=((1.0)*x65);
IkReal x100=((1.0)*x66);
IkReal x101=(x44*x45);
IkReal x102=(x42*x44);
IkReal x103=(x35*x42);
IkReal x104=(x36*x45);
IkReal x105=(x46*x47);
IkReal x106=((0.044)*r02*x51);
IkReal x107=((0.044)*x82);
IkReal x108=(x34*x43);
IkReal x109=(x47*x52);
IkReal x110=(x45*x49);
IkReal x111=(x42*x49);
IkReal x112=(x36*x43);
IkReal x113=(x35*x43);
IkReal x114=(x34*x45);
IkReal x115=(x42*x56);
IkReal x116=(x35*x45);
IkReal x117=(x45*x56);
IkReal x118=(x36*x42);
IkReal x119=(x34*x42);
IkReal x120=((0.012)*x82);
IkReal x121=((0.012)*r02*x51);
IkReal x122=(pz*x43*x50);
IkReal x123=((2.0)*x50*x52);
IkReal x124=((2.0)*x46*x51);
IkReal x125=(pz*x43*x51);
IkReal x126=((4.0)*x50*x52);
IkReal x127=((4.0)*x46*x51);
IkReal x128=(r02*x47*x51);
IkReal x129=(x45*x85);
IkReal x130=(x42*x84);
IkReal x131=(x47*x82);
IkReal x132=(x45*x79);
IkReal x133=(x45*x84);
IkReal x134=(x42*x85);
IkReal x135=(x42*x79);
IkReal x136=(x45*x81);
IkReal x137=(x42*x80);
IkReal x138=(x42*x83);
IkReal x139=(x45*x80);
IkReal x140=(x42*x81);
IkReal x141=(x45*x83);
IkReal x142=(x67+x68);
IkReal x143=(x76+x75);
IkReal x144=(x59+x61);
IkReal x145=(x77+x78);
IkReal x146=(x100+x99);
IkReal x147=(x93+x92);
IkReal x148=(x101+x102);
IkReal x149=(x86+x87);
IkReal x150=(x120+x121);
IkReal x151=(x104+x103);
IkReal x152=(x58+x57+x60);
IkReal x153=(x117+x115+x41);
IkReal x154=(x40+x98+x97);
IkReal x155=(x37+x88+x89);
IkReal x156=(x38+x94+x96);
IkReal x157=(x140+x141);
IkReal x158=(x91+x90+x95);
IkReal x159=(x62+x63+x64+x65+x66);
IkReal x160=(x116+x114+x119+x118);
IkReal x161=(x113+x112+x111+x110);
IkReal x162=(x108+x109+x105+x106+x107);
IkReal x163=(x137+x136+x139+x138);
IkReal x164=(x74+x62+x63+x64+x91+x90);
IkReal x165=(x124+x125+x122+x123);
IkReal x166=(x135+x134+x133+x132+x73+x72+x71);
IkReal x167=(x131+x130+x126+x127+x128+x129+x70+x69);
IkReal x168=((((-1.0)*x162))+x161+(((0.02473)*r02)));
IkReal x169=((((-1.0)*x161))+x162+(((0.056806)*r02)));
IkReal x170=((((-1.0)*x143))+(((-1.0)*x154))+(((-1.0)*x158))+x159+x148);
IkReal x171=((((-1.0)*x142))+(((-1.0)*x156))+(((-1.0)*x158))+x159+x147);
IkReal x172=((((-1.0)*x142))+(((-1.0)*x147))+(((-1.0)*x146))+x164+x156);
IkReal x173=((((-1.0)*x143))+(((-1.0)*x148))+(((-1.0)*x146))+x164+x154);
IkReal x174=((((-1.0)*x166))+(((-1.0)*x39))+x167);
IkReal x175=((((-1.0)*x166))+x167+x39);
IkReal x176=((((-1.0)*x157))+(((-1.0)*x155))+(((-1.0)*x165))+x160+x152+x144+x149);
IkReal x177=((((-1.0)*x145))+(((-1.0)*x157))+(((-1.0)*x150))+(((-1.0)*x165))+x160+x153+x152);
IkReal x178=((((-1.0)*x144))+(((-1.0)*x152))+(((-1.0)*x155))+(((-1.0)*x163))+x165+x151+x149);
IkReal x179=((((-1.0)*x150))+(((-1.0)*x152))+(((-1.0)*x163))+x165+x153+x151+x145);
IkReal gconst0=x176;
IkReal gconst1=x168;
IkReal gconst2=x178;
IkReal gconst3=x170;
IkReal gconst4=x174;
IkReal gconst5=x172;
IkReal gconst6=x176;
IkReal gconst7=x168;
IkReal gconst8=x178;
IkReal gconst9=x170;
IkReal gconst10=x174;
IkReal gconst11=x172;
IkReal gconst12=x171;
IkReal gconst13=x175;
IkReal gconst14=x173;
IkReal gconst15=x179;
IkReal gconst16=x169;
IkReal gconst17=x177;
IkReal gconst18=x171;
IkReal gconst19=x175;
IkReal gconst20=x173;
IkReal gconst21=x179;
IkReal gconst22=x169;
IkReal gconst23=x177;
IkReal x180=((1.0)*gconst21);
IkReal x181=(gconst14*gconst20);
IkReal x182=(gconst13*gconst17);
IkReal x183=(gconst14*gconst4);
IkReal x184=(gconst18*gconst22);
IkReal x185=(gconst20*gconst21);
IkReal x186=(gconst0*gconst17);
IkReal x187=(gconst12*gconst5);
IkReal x188=(gconst21*gconst8);
IkReal x189=((1.0)*gconst9);
IkReal x190=(gconst15*gconst2);
IkReal x191=(gconst16*gconst2);
IkReal x192=(gconst10*gconst18);
IkReal x193=(gconst1*gconst17);
IkReal x194=(gconst2*gconst3);
IkReal x195=(gconst2*gconst4);
IkReal x196=(gconst19*gconst21);
IkReal x197=(gconst19*gconst5);
IkReal x198=(gconst11*gconst6);
IkReal x199=(gconst12*gconst17);
IkReal x200=(gconst8*gconst9);
IkReal x201=(gconst7*gconst9);
IkReal x202=(gconst14*gconst3);
IkReal x203=(gconst14*gconst15);
IkReal x204=(gconst23*gconst6);
IkReal x205=(gconst14*gconst16);
IkReal x206=(gconst10*gconst6);
IkReal x207=(gconst1*gconst5);
IkReal x208=(gconst18*gconst23);
IkReal x209=(gconst20*gconst9);
IkReal x210=(gconst13*gconst5);
IkReal x211=(gconst11*gconst18);
IkReal x212=(gconst21*gconst7);
IkReal x213=(gconst19*gconst9);
IkReal x214=(gconst0*gconst5);
IkReal x215=(gconst22*gconst6);
IkReal x216=((1.0)*x215);
IkReal x217=(gconst2*x213);
IkReal x218=(gconst7*x193);
IkReal x219=((1.0)*x214);
IkReal x220=(gconst23*x219);
op[0]=(((x196*x205))+(((-1.0)*gconst19*x180*x182))+((x185*x199))+(((-1.0)*x184*x205))+((x203*x208))+(((-1.0)*x199*x208))+((x182*x184))+(((-1.0)*gconst15*x180*x181)));
op[1]=((((-1.0)*gconst7*x180*x182))+((x184*x210))+(((-1.0)*gconst19*x182*x189))+(((-1.0)*x199*x211))+(((-1.0)*gconst15*x181*x189))+(((-1.0)*gconst3*x180*x181))+(((-1.0)*x184*x191))+((x203*x211))+((x188*x199))+(((-1.0)*x192*x205))+((x182*x215))+((x190*x208))+((x185*x186))+((x185*x187))+((x184*x193))+((x205*x213))+((x205*x212))+(((-1.0)*gconst19*x180*x193))+(((-1.0)*x205*x216))+(((-1.0)*gconst13*x180*x197))+(((-1.0)*gconst20*x180*x190))+(((-1.0)*gconst8*x180*x203))+((x202*x208))+(((-1.0)*x183*x184))+((x191*x196))+((x203*x204))+(((-1.0)*x199*x204))+(((-1.0)*x186*x208))+((x182*x192))+((x199*x209))+((x183*x196))+(((-1.0)*x187*x208)));
op[2]=(((x190*x211))+(((-1.0)*gconst13*x189*x197))+((x186*x188))+(((-1.0)*x191*x192))+((x191*x212))+((x191*x213))+((x198*x203))+(((-1.0)*x187*x211))+(((-1.0)*gconst1*x180*x197))+((x187*x209))+((x210*x215))+((x194*x208))+((x193*x215))+((x202*x211))+(((-1.0)*gconst8*x180*x190))+((x187*x188))+((x183*x213))+((x183*x212))+(((-1.0)*x184*x195))+(((-1.0)*x183*x216))+((x201*x205))+((x190*x204))+(((-1.0)*gconst3*x181*x189))+(((-1.0)*x205*x206))+(((-1.0)*gconst7*x180*x210))+((x184*x207))+(((-1.0)*gconst20*x180*x194))+((x195*x196))+(((-1.0)*x183*x192))+((x192*x193))+(((-1.0)*x198*x199))+(((-1.0)*gconst20*x189*x190))+(((-1.0)*gconst7*x182*x189))+(((-1.0)*gconst8*x180*x202))+((x202*x204))+(((-1.0)*gconst8*x189*x203))+(((-1.0)*x191*x216))+(((-1.0)*x186*x211))+(((-1.0)*gconst19*x189*x193))+(((-1.0)*x208*x219))+(((-1.0)*x186*x204))+(((-1.0)*x180*x218))+((x192*x210))+((x182*x206))+((x199*x200))+((x186*x209))+((x185*x214))+(((-1.0)*x187*x204)));
op[3]=((((-1.0)*gconst1*x189*x197))+(((-1.0)*gconst8*x189*x190))+((x198*x202))+((x187*x200))+((x194*x204))+((x206*x210))+((x192*x207))+(((-1.0)*gconst8*x180*x194))+((x207*x215))+(((-1.0)*x204*x219))+((x191*x201))+(((-1.0)*x187*x198))+((x209*x214))+(((-1.0)*x191*x206))+(((-1.0)*x189*x218))+(((-1.0)*gconst7*x180*x207))+(((-1.0)*x186*x198))+(((-1.0)*gconst20*x189*x194))+(((-1.0)*gconst8*x189*x202))+(((-1.0)*x211*x219))+((x190*x198))+(((-1.0)*gconst7*x189*x210))+((x188*x214))+(((-1.0)*x195*x216))+((x183*x201))+((x193*x206))+(((-1.0)*x183*x206))+((x194*x211))+((x186*x200))+((x195*x212))+((x195*x213))+(((-1.0)*x192*x195)));
op[4]=((((-1.0)*gconst8*x189*x194))+(((-1.0)*gconst7*x189*x207))+((x195*x201))+(((-1.0)*x198*x219))+((x194*x198))+(((-1.0)*x195*x206))+((x200*x214))+((x206*x207)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
sj4array[0]=(((r00*sj0))+(((-1.0)*cj0*r01)));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x221=cj2*cj2;
IkReal x222=sj2*sj2;
IkReal x223=(cj2*cj4);
IkReal x224=(r01*sj0);
IkReal x225=((0.044783648)*cj2);
IkReal x226=((0.000132496)*cj4);
IkReal x227=((0.000913952)*sj2);
IkReal x228=(cj0*r00);
IkReal x229=((0.000397488)*cj4);
IkReal x230=(cj4*sj2);
IkReal x231=(cj0*px);
IkReal x232=((0.089567296)*cj2);
IkReal x233=((0.000456976)*sj2);
IkReal x234=(py*sj0);
IkReal x235=((1.4872e-5)*x230);
IkReal x236=((0.000228488)*r02*sj2);
IkReal x237=((0.001457456)*x223);
IkReal x238=((0.022391824)*cj2*r02);
IkReal x239=(x221*x229);
IkReal x240=(x222*x229);
IkReal x241=((0.038949768)*sj2*x223);
IkReal x242=(x221*x226);
IkReal x243=(x222*x226);
IkReal x244=((0.012983256)*sj2*x223);
IkReal x245=((0.132496)*x223*x231);
IkReal x246=((0.132496)*x223*x234);
IkReal x247=((0.001352)*x230*x231);
IkReal x248=((0.001352)*x230*x234);
IkReal x249=(x243+x244);
IkReal x250=(x241+x240);
IkReal x251=(x238+x236+x237+x235);
IkReal x252=(x247+x246+x245+x248);
IkReal x253=((((-1.0)*x224*x233))+(((-1.0)*x224*x225))+(((-1.0)*x225*x228))+(((-0.002704)*pz*x230))+(((-1.0)*x228*x233))+(((-0.264992)*pz*x223)));
op[0]=(x252+x242+(((-1.0)*x249))+(((-1.0)*x251)));
op[1]=x253;
op[2]=(x252+x239+(((-1.0)*x251))+(((-1.0)*x250)));
op[3]=((((-1.0)*x224*x232))+(((-1.0)*x224*x227))+(((-1.0)*x227*x228))+(((-0.005408)*pz*x230))+(((-1.0)*x228*x232))+(((-0.529984)*pz*x223)));
op[4]=(x251+x239+(((-1.0)*x250))+(((-1.0)*x252)));
op[5]=x253;
op[6]=(x251+x242+(((-1.0)*x249))+(((-1.0)*x252)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x254=cj2*cj2;
IkReal x255=sj2*sj2;
IkReal x256=(cj2*r02);
IkReal x257=(cj2*cj4);
IkReal x258=(py*sj0);
IkReal x259=(cj4*sj2);
IkReal x260=((0.000132496)*cj4);
IkReal x261=((0.000397488)*cj4);
IkReal x262=(r02*sj2);
IkReal x263=(r01*sj0);
IkReal x264=((0.022391824)*sj2);
IkReal x265=(cj0*px);
IkReal x266=((0.000228488)*cj2);
IkReal x267=(cj0*r00);
IkReal x268=((0.000421824)*x257);
IkReal x269=((0.041338752)*x259);
IkReal x270=((0.000140608)*x257);
IkReal x271=((0.013779584)*x259);
IkReal x272=(x264*x267);
IkReal x273=(x263*x264);
IkReal x274=((0.001352)*pz*x257);
IkReal x275=(x266*x267);
IkReal x276=(x263*x266);
IkReal x277=((0.132496)*pz*x259);
IkReal x278=(x254*x261);
IkReal x279=(x255*x261);
IkReal x280=((0.038949768)*sj2*x257);
IkReal x281=(x254*x260);
IkReal x282=(x255*x260);
IkReal x283=((0.012983256)*sj2*x257);
IkReal x284=(x268+x278);
IkReal x285=(x270+x281);
IkReal x286=(x271+x283+x282);
IkReal x287=(x269+x279+x280);
IkReal x288=(x276+x274+x275);
IkReal x289=(x277+x272+x273);
IkReal x290=((((0.002704)*x257*x258))+(((0.044783648)*x262))+(((-0.000456976)*x256))+(((-2.9744e-5)*x257))+(((0.002704)*x257*x265))+(((-0.264992)*x258*x259))+(((-0.264992)*x259*x265))+(((0.002914912)*x259)));
j1evalpoly[0]=((((htj1*htj1*htj1*htj1)*((x288+x284+(((-1.0)*x287))+(((-1.0)*x289))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x288+x285+(((-1.0)*x286))+(((-1.0)*x289))))))+((x290*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1)*((x289+x284+(((-1.0)*x287))+(((-1.0)*x288))))))+(((htj1*htj1*htj1)*(((((0.005408)*x257*x265))+(((0.005829824)*x259))+(((-0.529984)*x258*x259))+(((-0.529984)*x259*x265))+(((0.005408)*x257*x258))+(((0.089567296)*x262))+(((-5.9488e-5)*x257))+(((-0.000913952)*x256))))))+((htj1*x290))+x289+x285+(((-1.0)*x286))+(((-1.0)*x288)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x291=(py*sj0);
IkReal x292=(cj1*sj2);
IkReal x293=((5.91715976331361)*pz);
IkReal x294=((0.0650887573964497)*cj2);
IkReal x295=(cj0*px);
IkReal x296=(cj1*cj2);
IkReal x297=((5.91715976331361)*sj1*sj2);
IkReal x298=((5.91715976331361)*cj2*sj1);
IkReal x299=((5.91715976331361)*cj1*x295);
if( IKabs(((-0.00591715976331361)+(((-1.0)*x291*x297))+(((-1.0)*cj1*x294))+(((5.91715976331361)*x291*x296))+((cj2*sj1*x293))+(((-0.615384615384615)*sj2))+(((-1.0)*x295*x297))+((x292*x293))+(((5.91715976331361)*x295*x296))+(((0.0650887573964497)*sj1*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.579881656804734)+(((-1.0)*x291*x298))+((sj1*x294))+(((-5.91715976331361)*x291*x292))+(((-1.0)*sj1*sj2*x293))+(((-0.615384615384615)*cj2))+(((-5.91715976331361)*x292*x295))+(((0.0650887573964497)*x292))+(((-1.0)*x295*x298))+((x293*x296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.00591715976331361)+(((-1.0)*x291*x297))+(((-1.0)*cj1*x294))+(((5.91715976331361)*x291*x296))+((cj2*sj1*x293))+(((-0.615384615384615)*sj2))+(((-1.0)*x295*x297))+((x292*x293))+(((5.91715976331361)*x295*x296))+(((0.0650887573964497)*sj1*sj2))))+IKsqr(((-0.579881656804734)+(((-1.0)*x291*x298))+((sj1*x294))+(((-5.91715976331361)*x291*x292))+(((-1.0)*sj1*sj2*x293))+(((-0.615384615384615)*cj2))+(((-5.91715976331361)*x292*x295))+(((0.0650887573964497)*x292))+(((-1.0)*x295*x298))+((x293*x296))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.00591715976331361)+(((-1.0)*x291*x297))+(((-1.0)*cj1*x294))+(((5.91715976331361)*x291*x296))+((cj2*sj1*x293))+(((-0.615384615384615)*sj2))+(((-1.0)*x295*x297))+((x292*x293))+(((5.91715976331361)*x295*x296))+(((0.0650887573964497)*sj1*sj2))), ((-0.579881656804734)+(((-1.0)*x291*x298))+((sj1*x294))+(((-5.91715976331361)*x291*x292))+(((-1.0)*sj1*sj2*x293))+(((-0.615384615384615)*cj2))+(((-5.91715976331361)*x292*x295))+(((0.0650887573964497)*x292))+(((-1.0)*x295*x298))+((x293*x296))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[12];
IkReal x300=IKcos(j3);
IkReal x301=IKsin(j3);
IkReal x302=px*px;
IkReal x303=pz*pz;
IkReal x304=py*py;
IkReal x305=(py*sj0);
IkReal x306=((2.0)*px);
IkReal x307=(r00*sj0);
IkReal x308=(py*sj1);
IkReal x309=((0.208)*sj1);
IkReal x310=(cj4*sj2);
IkReal x311=(cj0*pz);
IkReal x312=(cj1*r01);
IkReal x313=((0.000196)*cj4);
IkReal x314=(r02*sj1);
IkReal x315=((0.022)*r01);
IkReal x316=(pz*r01);
IkReal x317=(cj0*r01);
IkReal x318=((1.0)*px);
IkReal x319=((0.011)*sj1);
IkReal x320=(cj0*r02);
IkReal x321=(cj1*r00);
IkReal x322=((0.009)*cj0);
IkReal x323=((0.003042)*sj4);
IkReal x324=((0.098)*cj2);
IkReal x325=(cj1*r02);
IkReal x326=((0.208)*r02);
IkReal x327=(cj0*r00);
IkReal x328=((0.001)*cj4);
IkReal x329=((0.022)*pz);
IkReal x330=((0.022)*px);
IkReal x331=((0.169)*sj4);
IkReal x332=(px*r01);
IkReal x333=(cj2*cj4);
IkReal x334=((0.018)*r01);
IkReal x335=((0.208)*cj1);
IkReal x336=((0.208)*sj0);
IkReal x337=((0.018)*pz);
IkReal x338=(cj2*sj4);
IkReal x339=(cj0*py);
IkReal x340=((1.0)*sj0);
IkReal x341=((0.208)*r00);
IkReal x342=((2.0)*pz);
IkReal x343=(r01*sj1);
IkReal x344=((0.104)*sj0);
IkReal x345=(r00*sj1);
IkReal x346=(pz*sj1);
IkReal x347=(cj0*px);
IkReal x348=(r01*sj0);
IkReal x349=((0.011)*cj1);
IkReal x350=((1.0)*sj1);
IkReal x351=((0.002288)*sj1);
IkReal x352=(cj1*pz);
IkReal x353=((1.0)*py);
IkReal x354=((0.001)*sj2);
IkReal x355=((0.018)*r00);
IkReal x356=(pz*r02);
IkReal x357=((0.098)*sj2);
IkReal x358=((0.000198)*sj1);
IkReal x359=((0.009)*sj0);
IkReal x360=(sj2*sj4);
IkReal x361=((0.022)*py);
IkReal x362=((0.018)*py);
IkReal x363=(cj2*x301);
IkReal x364=((0.038245)*x300);
IkReal x365=((0.000338)*x301);
IkReal x366=((0.009)*x300);
IkReal x367=(cj2*x300);
IkReal x368=((0.018)*px*sj0);
IkReal x369=(sj2*x301);
IkReal x370=((1.0)*x304);
IkReal x371=((1.0)*x303);
IkReal x372=(sj2*x300);
IkReal x373=(cj4*x301);
IkReal x374=((0.033124)*x300);
IkReal x375=((1.0)*x302);
IkReal x376=(cj4*x300);
evalcond[0]=(((x301*x310))+((sj0*x312))+x314+((cj0*x321))+((x300*x333)));
evalcond[1]=(((x300*x310))+(((-1.0)*x327*x350))+x325+(((-1.0)*x340*x343))+(((-1.0)*x301*x333)));
evalcond[2]=(((cj1*x305))+(((-0.001)*cj2))+(((-0.169)*x363))+((cj1*x347))+x357+x346+(((-1.0)*x349))+(((0.169)*x372)));
evalcond[3]=((-0.104)+(((-1.0)*x354))+(((-1.0)*x324))+(((-0.169)*x369))+(((-0.169)*x367))+x352+x319+(((-1.0)*cj0*sj1*x318))+(((-1.0)*x305*x350)));
evalcond[4]=((((0.104)*cj0*x321))+(((-1.0)*r00*x311))+(((-0.169)*cj4))+((r02*x305))+((x312*x344))+(((-1.0)*x301*x328))+(((-0.011)*r02))+(((0.104)*x314))+(((-1.0)*x316*x340))+(((-0.098)*x376))+((px*x320)));
evalcond[5]=((((0.104)*x325))+(((-0.104)*sj1*x327))+(((0.011)*x348))+(((0.011)*x327))+(((-1.0)*r00*x318))+(((-1.0)*x356))+(((-1.0)*x300*x328))+(((-0.009)*sj4))+(((0.098)*x373))+(((-1.0)*r01*x353))+(((-1.0)*x343*x344))+(((0.009)*x307))+(((-0.009)*x317)));
evalcond[6]=((0.027229)+(((-1.0)*x309*x347))+(((-1.0)*x375))+(((-1.0)*x370))+(((-1.0)*x371))+(((0.022)*x305))+x351+x374+x368+x365+(((-1.0)*x305*x309))+((cj0*x330))+((pz*x335))+(((-0.018)*x339)));
evalcond[7]=(((sj4*x357))+(((-1.0)*sj0*x314*x318))+(((-1.0)*x311*x343))+(((-1.0)*x307*x349))+(((0.011)*cj0*x312))+((x308*x320))+(((-1.0)*x312*x318))+(((-0.001)*x338))+((x333*x366))+(((-1.0)*x331*x363))+((x312*x359))+((x307*x346))+(((0.009)*x314))+((py*x321))+((x331*x372))+(((0.009)*x301*x310))+((x321*x322)));
evalcond[8]=((((0.104)*x307))+((px*sj0*x325))+((x317*x319))+((sj4*x324))+(((-1.0)*x310*x366))+((sj4*x354))+(((-0.009)*x325))+(((-1.0)*x307*x352))+(((0.009)*x301*x333))+(((-1.0)*x318*x343))+((x311*x312))+((x343*x359))+((x322*x345))+(((-1.0)*x307*x319))+(((-1.0)*cj1*x320*x353))+(((-0.104)*x317))+((x331*x369))+((x331*x367))+((r00*x308)));
evalcond[9]=(((x302*x317))+((r01*x305*x306))+((sj4*x374))+(((-1.8e-5)*x376))+((sj4*x365))+(((0.001872)*x325))+((pz*x307*x335))+(((-1.0)*x317*x351))+(((-1.0)*px*x355))+(((0.000198)*x348))+(((0.001764)*x373))+((r00*x361))+(((-0.010856)*x307))+(((0.000198)*x327))+(((-1.0)*py*x334))+(((-0.208)*x311*x312))+(((-1.0)*x308*x341))+(((-1.0)*py*x306*x327))+(((-1.0)*x307*x371))+(((-1.0)*x307*x370))+(((-0.001872)*sj0*x343))+(((-1.0)*r02*x337))+(((0.038085)*sj4))+((x302*x307))+(((-0.001872)*sj1*x327))+(((-1.0)*px*x325*x336))+((py*x320*x335))+((x303*x317))+((x307*x351))+(((0.010856)*x317))+((sj0*x306*x356))+(((-1.0)*px*x315))+(((-1.0)*x317*x370))+((x309*x332))+(((-2.0)*py*r02*x311)));
evalcond[10]=((((-1.8e-5)*x338))+(((-1.0)*pz*x306*x345))+((x302*x314))+(((-1.0)*x304*x312*x340))+((x325*x329))+((x304*x314))+(((-1.0)*sj1*x311*x334))+(((0.022)*x311*x345))+(((0.010776)*cj0*x321))+((sj0*x303*x312))+(((-1.0)*x306*x312*x339))+(((-1.0)*x305*x306*x321))+(((0.000198)*cj0*x312))+((x313*x363))+((cj0*x304*x321))+(((0.011018)*x314))+(((0.010776)*sj0*x312))+(((-1.0)*x316*x336))+(((-0.022)*x305*x314))+((sj0*x315*x346))+(((-1.0)*cj0*x314*x330))+(((-2.0)*x308*x316))+((x305*x326))+(((0.001764)*x360))+(((-1.0)*x306*x311*x325))+(((-0.000198)*cj1*x307))+((x312*x361))+((x333*x364))+(((-1.0)*x305*x325*x342))+((x321*x362))+((sj0*x302*x312))+(((0.018)*x308*x320))+(((0.000196)*x300*x310))+(((0.208)*px*x320))+(((-0.002288)*r02))+(((-1.0)*cj0*x321*x375))+((x323*x372))+(((-0.018)*px*x312))+(((0.033124)*x333))+(((-1.0)*x311*x341))+(((0.000338)*x310))+(((-1.0)*x314*x368))+(((-1.0)*x314*x371))+(((0.019039)*x301*x310))+(((-1.0)*x323*x363))+((sj1*x307*x337))+((x321*x330))+((cj0*x303*x321)));
evalcond[11]=((((-1.0)*x313*x367))+(((-0.002288)*x327))+(((-1.0)*x330*x345))+(((-1.0)*x304*x327*x350))+(((-0.022)*x305*x325))+(((-1.0)*x314*x329))+(((-1.8e-5)*x360))+((x306*x311*x314))+(((-0.010614)*x325))+(((-1.0)*x317*x358))+((x305*x314*x342))+((x310*x364))+((x304*x325))+((x302*x325))+((pz*x326))+(((-0.002288)*x348))+(((0.010856)*sj1*x327))+(((0.018)*sj1*x332))+((sj1*x302*x327))+(((-1.0)*x308*x315))+(((0.001872)*x317))+(((0.022)*x311*x321))+(((0.000196)*x301*x310))+(((-0.019039)*x301*x333))+((cj1*x320*x362))+(((-0.001872)*x307))+((cj1*x307*x337))+(((-1.0)*x325*x368))+(((-1.0)*py*x312*x342))+(((0.010856)*sj0*x343))+((x305*x306*x345))+(((-1.0)*pz*x306*x321))+(((-1.0)*x325*x371))+(((-1.0)*x308*x355))+((sj0*x304*x343))+((sj0*x312*x329))+((x306*x308*x317))+(((-1.0)*x303*x340*x343))+(((-1.0)*x303*x327*x350))+((x307*x358))+(((0.208)*py*r01))+(((-0.000338)*x333))+(((-0.018)*x311*x312))+(((-1.0)*x323*x367))+(((-1.0)*x323*x369))+(((-1.0)*cj1*x320*x330))+(((-0.001764)*x338))+(((0.033124)*x310))+((px*x341))+(((-1.0)*x302*x340*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - le_arm (32f6537a94890b4ceb87cd15639231cd)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
